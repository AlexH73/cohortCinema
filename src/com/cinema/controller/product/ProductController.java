package com.cinema.controller.product;

import com.cinema.model.product.Product;
import com.cinema.model.product.IProduct;
import com.cinema.service.product.IProductService;
import com.cinema.util.exceptions.ProductNotFoundException;

import java.math.BigDecimal;
import java.util.List;
import java.util.Scanner;
import java.util.Currency;

public class ProductController implements IProductController {
    private final IProductService productService;
    private final ConsoleOutputHandler outputHandler;
    private final Scanner scanner; // –ü–µ—Ä–µ–Ω–æ—Å–∏–º Scanner —Å—é–¥–∞, –≤ –ø–æ–ª–µ –∫–ª–∞—Å—Å–∞

    public ProductController(IProductService productService, ConsoleOutputHandler outputHandler) {
        this.productService = productService;
        this.outputHandler = outputHandler;
        this.scanner = new Scanner(System.in); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–¥–µ—Å—å
    }

    public void runProductMenu() {
        int choice;

        do {
            System.out.println("\n=== –ú–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤ ===");
            System.out.println("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã");
            System.out.println("2. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç");
            System.out.println("3. –ù–∞–π—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –ø–æ ID");
            System.out.println("4. –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç");
            System.out.println("0. –í—ã—Ö–æ–¥");
            System.out.print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤—ã–±–æ—Ä: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException e) {
                System.out.println("–û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
                choice = -1;
            }

            switch (choice) {
                case 1 -> showAllProducts();
                case 2 -> addProduct();
                case 3 -> findProductById();
                case 4 -> removeProduct();
                case 0 -> System.out.println("–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –ø—Ä–æ–¥—É–∫—Ç–æ–≤.");
                default -> System.out.println("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
            }
        } while (choice != 0);

        scanner.close(); // –ó–∞–∫—Ä—ã—Ç—å Scanner –∑–¥–µ—Å—å
    }

    private void addProduct() {
        outputHandler.print("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ");
        String name = scanner.nextLine().trim();
        if (name.isEmpty()) {
            outputHandler.print("‚ùó –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
            return;
        }

        outputHandler.print("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞: ");
        String description = scanner.nextLine().trim();

        outputHandler.print("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–æ–¥—É–∫—Ç–∞: ");
        double price;
        try {
            price = Double.parseDouble(scanner.nextLine());
            if (price <= 0) {
                outputHandler.print("‚ùó –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
                return;
            }
        } catch (NumberFormatException e) {
            outputHandler.print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã.");
            return;
        }

        outputHandler.print("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ: ");
        int stockQuantity;
        try {
            stockQuantity = Integer.parseInt(scanner.nextLine());
            if (stockQuantity < 0) {
                outputHandler.print("‚ùó –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.");
                return;
            }
        } catch (NumberFormatException e) {
            outputHandler.print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞.");
            return;
        }

        BigDecimal priceBigDecimal = BigDecimal.valueOf(price);
        Currency currency = Currency.getInstance("USD");

        IProduct product = new Product(
                name,
                description,
                priceBigDecimal,
                stockQuantity,
                currency
        );

        productService.createProduct(product);
        outputHandler.print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: " + product);
    }

    private void removeProduct() {
        outputHandler.print("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ");
        String idInput = scanner.nextLine().trim();

        try {
            Long id = Long.parseLong(idInput);
            productService.deleteProduct(id);
            outputHandler.print("‚úÖ –ü—Ä–æ–¥—É–∫—Ç —É–¥–∞–ª—ë–Ω.");
        } catch (NumberFormatException e) {
            outputHandler.print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.");
        } catch (ProductNotFoundException e) {
            outputHandler.print("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }

    private void showAllProducts() {
        try {
            List<IProduct> products = productService.getAllProducts();
            if (products.isEmpty()) {
                outputHandler.print("üîç –°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—É—Å—Ç.");
            } else {
                outputHandler.print("üì¶ –í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã:");
                products.forEach(p -> outputHandler.print(p.toString()));
            }
        } catch (Exception e) {
            outputHandler.print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
        }
    }

    private void findProductById() {
        outputHandler.print("–í–≤–µ–¥–∏—Ç–µ ID –ø—Ä–æ–¥—É–∫—Ç–∞: ");
        String idInput = scanner.nextLine().trim();

        try {
            Long id = Long.parseLong(idInput);
            IProduct product = productService.getProductById(id);
            outputHandler.print("üîç –ù–∞–π–¥–µ–Ω –ø—Ä–æ–¥—É–∫—Ç: " + product);
        } catch (NumberFormatException e) {
            outputHandler.print("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.");
        } catch (ProductNotFoundException e) {
            outputHandler.print("‚ùå –û—à–∏–±–∫–∞: " + e.getMessage());
        }
    }
}
