package com.cinema.model.film;

import jakarta.persistence.*;
import java.time.LocalDate;
import java.util.Objects;

/**
 * –ö–ª–∞—Å—Å Film –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ–∏–ª—å–º, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –≤ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–µ.
 */
@Entity
@Table(name = "films")
public class Film implements IFilm {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id; // ‚úÖ –û–±—ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø Long, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ —Ö—Ä–∞–Ω–∏—Ç—å null

    @Column(nullable = false)
    private String title;

    @Column(length = 1000)
    private String description;

    @Column(nullable = false)
    private int durationMinutes;

    @Enumerated(EnumType.STRING)
    @Column(nullable = false)
    private Genre genre;

    @Column(nullable = false)
    private double rating;

    @Column(nullable = false)
    private String language;

    private String posterUrl;

    private LocalDate releaseDate;

    // üßπ Hibernate —Ç—Ä–µ–±—É–µ—Ç –ø—É—Å—Ç–æ–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ public –∏–ª–∏ protected)
    protected Film() {}

    public Film(String title, String description, int durationMinutes, Genre genre,
                double rating, String language, String posterUrl, LocalDate releaseDate) {
        setTitle(title);
        setDescription(description);
        setDurationMinutes(durationMinutes);
        setGenre(genre);
        setRating(rating);
        setLanguage(language);
        setPosterUrl(posterUrl);
        setReleaseDate(releaseDate);
    }

    public Long getId() {
        return id;
    }

    public String getTitle() {
        return title;
    }

    public void setTitle(String title) {
        if (title == null || title.isBlank()) {
            throw new IllegalArgumentException("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        }
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description; // –ú–æ–∂–Ω–æ –±—ã—Ç—å –ø—É—Å—Ç—ã–º
    }

    public int getDurationMinutes() {
        return durationMinutes;
    }

    public void setDurationMinutes(int durationMinutes) {
        if (durationMinutes <= 0) {
            throw new IllegalArgumentException("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∏–ª—å–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.");
        }
        this.durationMinutes = durationMinutes;
    }

    public Genre getGenre() {
        return genre;
    }

    public void setGenre(Genre genre) {
        if (genre == null) {
            throw new IllegalArgumentException("–ñ–∞–Ω—Ä –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å null.");
        }
        this.genre = genre;
    }

    public double getRating() {
        return rating;
    }

    public void setRating(double rating) {
        if (rating < 0 || rating > 10) {
            throw new IllegalArgumentException("–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 0 –¥–æ 10.");
        }
        this.rating = rating;
    }

    public String getLanguage() {
        return language;
    }

    public void setLanguage(String language) {
        if (language == null || language.isBlank()) {
            throw new IllegalArgumentException("–Ø–∑—ã–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
        }
        this.language = language;
    }

    public String getPosterUrl() {
        return posterUrl;
    }

    public void setPosterUrl(String posterUrl) {
        this.posterUrl = posterUrl;
    }

    public LocalDate getReleaseDate() {
        return releaseDate;
    }

    public void setReleaseDate(LocalDate releaseDate) {
        this.releaseDate = releaseDate;
    }

    @Override
    public String toString() {
        return "Film{" +
                "id=" + id +
                ", title='" + title + '\'' +
                ", genre=" + genre +
                ", durationMinutes=" + durationMinutes +
                '}';
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (!(o instanceof Film)) return false;
        Film film = (Film) o;
        return Objects.equals(id, film.id);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }
}
