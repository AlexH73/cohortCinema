package com.example.cinema.service.report;

import com.example.cinema.util.exceptions.ReportDateRangeException;
import com.example.cinema.model.order.Order;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.List;
import java.util.Locale;
import java.text.NumberFormat;

/**
 * –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç—á—ë—Ç–æ–≤ –ø–æ –±–∏–ª–µ—Ç–∞–º –∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º.
 */
public class TicketAndProductReportGenerator implements IReportGenerator {
    private final List<Order> orders;
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd");

    public TicketAndProductReportGenerator(List<Order> orders) {
        this.orders = orders;
    }

    private LocalDate parseDate(String dateString) {
        try {
            return LocalDate.parse(dateString, DATE_FORMATTER);
        } catch (DateTimeParseException e) {
            throw new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ yyyy-MM-dd.", e);
        }
    }

    @Override
    public String generateProductSalesReport(String startDate, String endDate) {
        LocalDate start = parseDate(startDate);
        LocalDate end = parseDate(endDate);

        if (start.isAfter(end)) {
            throw new ReportDateRangeException("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π!");
        }

        BigDecimal total = orders.stream()
                .filter(o -> {
                    LocalDateTime orderDate = o.getCreatedAt();
                    LocalDate orderLocalDate = orderDate.toLocalDate();
                    return (orderLocalDate.isEqual(start) || orderLocalDate.isAfter(start)) &&
                            (orderLocalDate.isEqual(end) || orderLocalDate.isBefore(end));
                })
                .flatMap(o -> o.getProducts().keySet().stream()) // –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ (–ø—Ä–æ–¥—É–∫—Ç—ã) –∏–∑ Map
                .map(p -> p.getPrice())
                .reduce(BigDecimal.ZERO, BigDecimal::add);

        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª–∏ –∏ –≤–∞–ª—é—Ç—ã
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(Locale.getDefault());
        String formattedTotal = currencyFormat.format(total);

        return "üßÉ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤\n" +
                "–ü–µ—Ä–∏–æ–¥: " + start + " - " + end + "\n" +
                "–û–±—â–∞—è —Å—É–º–º–∞: " + formattedTotal;
    }

    @Override
    public String generateTicketSalesReport(String startDate, String endDate) {
        LocalDate start = parseDate(startDate);
        LocalDate end = parseDate(endDate);

        if (start.isAfter(end)) {
            throw new ReportDateRangeException("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π!");
        }

        BigDecimal total = orders.stream()
                .filter(o -> {
                    LocalDateTime orderDate = o.getCreatedAt();
                    LocalDate orderLocalDate = orderDate.toLocalDate();
                    return (orderLocalDate.isEqual(start) || orderLocalDate.isAfter(start)) &&
                            (orderLocalDate.isEqual(end) || orderLocalDate.isBefore(end));
                })
                .flatMap(o -> o.getTickets().stream())
                .map(t -> BigDecimal.valueOf(t.getPrice())) // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º double –≤ BigDecimal
                .reduce(BigDecimal.ZERO, BigDecimal::add);


        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ —Å —É—á–µ—Ç–æ–º –ª–æ–∫–∞–ª–∏ –∏ –≤–∞–ª—é—Ç—ã
        NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(Locale.getDefault());
        String formattedTotal = currencyFormat.format(total);

        return "üí≥ –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–∞–∂–∞—Ö –±–∏–ª–µ—Ç–æ–≤\n" +
                "–ü–µ—Ä–∏–æ–¥: " + start + " - " + end + "\n" +
                "–û–±—â–∞—è —Å—É–º–º–∞: " + formattedTotal;
    }
}