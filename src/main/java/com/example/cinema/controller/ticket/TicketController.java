package com.example.cinema.controller.ticket;

import com.example.cinema.model.session.Session;
import com.example.cinema.model.ticket.Ticket;
import com.example.cinema.model.hall.Seat;
import com.example.cinema.model.user.Customer;
import com.example.cinema.model.user.Role;
import com.example.cinema.service.session.ISessionService;
import com.example.cinema.service.ticket.ITicketService;
import com.example.cinema.util.exceptions.BookingException;
import com.example.cinema.util.exceptions.ReturnException;
import com.example.cinema.util.utils.ConsoleOutputHandler;

import java.time.Duration;
import java.time.LocalDateTime;
import java.util.List;
import java.util.Scanner;

public class TicketController implements ITicketController {

    private final ITicketService ticketService;
    private final ISessionService sessionService;
    private final ConsoleOutputHandler console;
    private final Customer currentUser;
    private final Scanner scanner;

    public TicketController(
            ITicketService ticketService,
            ISessionService sessionService,
            ConsoleOutputHandler console,
            Customer currentUser
    ) {
        this.ticketService = ticketService;
        this.sessionService = sessionService;
        this.console = console;
        this.currentUser = currentUser;
        this.scanner = new Scanner(System.in);
    }

    @Override
    public void buyTicket() {
        console.print("–í–≤–µ–¥–∏—Ç–µ ID —Å–µ–∞–Ω—Å–∞: ");
        Long sessionId = Long.parseLong(scanner.nextLine());

        Session session = sessionService.getSessionById(sessionId);
        if (session == null) {
            console.printError("‚ùå –°–µ–∞–Ω—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            return;
        }

        if (Duration.between(LocalDateTime.now(), session.getStartTime()).toMinutes() < 5) {
            console.printWarning("‚è≥ –ù–µ–ª—å–∑—è –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.");
            return;
        }

        console.print("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –º–µ—Å—Ç–∞: ");
        int seatNumber = Integer.parseInt(scanner.nextLine());

        Seat seat = new Seat(seatNumber); // –£–ø—Ä–æ—â–µ–Ω–æ: –±–µ–∑ —Ä—è–¥–∞
        double basePrice = session.getTicketPrice();
        double discount = isEligibleForDiscount(currentUser) ? 0.20 : 0.0;
        double finalPrice = basePrice * (1 - discount);

        try {
            Ticket ticket = ticketService.bookTicket(session, currentUser, seat, finalPrice);
            console.printSuccess("‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω: " + ticket);
        } catch (BookingException e) {
            console.printError("‚ùå –û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + e.getMessage());
        }
    }

    @Override
    public void returnTicket() {
        console.print("–í–≤–µ–¥–∏—Ç–µ ID –±–∏–ª–µ—Ç–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞: ");
        Long ticketId = Long.parseLong(scanner.nextLine());

        try {
            Ticket ticket = ticketService.getTicketById(ticketId);
            if (ticket == null || !ticket.getUser().equals(currentUser)) {
                console.printError("‚ùå –ë–∏–ª–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.");
                return;
            }

            Session session = ticket.getSession();
            if (Duration.between(LocalDateTime.now(), session.getStartTime()).toMinutes() < 5) {
                console.printWarning("‚è≥ –ù–µ–ª—å–∑—è –≤–µ—Ä–Ω—É—Ç—å –±–∏–ª–µ—Ç –º–µ–Ω–µ–µ —á–µ–º –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.");
                return;
            }

            ticketService.returnTicket(ticket);
            console.printSuccess("‚úÖ –ë–∏–ª–µ—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â—ë–Ω.");
        } catch (ReturnException e) {
            console.printError("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞: " + e.getMessage());
        }
    }

    @Override
    public void showMyTickets() {
        List<Ticket> tickets = ticketService.getTicketsByCustomer(currentUser);
        if (tickets.isEmpty()) {
            console.printInfo("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –±–∏–ª–µ—Ç–æ–≤.");
        } else {
            console.printInfo("üéü –í–∞—à–∏ –±–∏–ª–µ—Ç—ã:");
            tickets.forEach(ticket -> console.print(ticket.toString()));
        }
    }

    private boolean isEligibleForDiscount(Customer user) {
        return user.getRole() == Role.STUDENT || user.getRole() == Role.PENSIONER;
    }
}