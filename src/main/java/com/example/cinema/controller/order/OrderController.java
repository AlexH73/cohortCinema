package com.example.cinema.controller.order;

import com.example.cinema.model.order.Order;
import com.example.cinema.model.order.OrderStatus;
import com.example.cinema.service.order.IOrderService;
import com.example.cinema.util.exceptions.OrderNotFoundException;
import com.example.cinema.util.utils.ConsoleOutputHandler;

import java.util.List;
import java.util.Scanner;

public class OrderController implements IOrderController {
    private final IOrderService orderService;
    private final ConsoleOutputHandler output;
    private final Scanner scanner;

    public OrderController(IOrderService orderService, ConsoleOutputHandler output) {
        this.orderService = orderService;
        this.output = output;
        this.scanner = new Scanner(System.in);
    }

    @Override
    public void runOrderMenu() {
        int choice;
        do {
            output.printInfo("\n=== –ú–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤ ===");
            output.printInfo("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã");
            output.printInfo("2. –ù–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ ID");
            output.printInfo("3. –û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑");
            output.printInfo("4. –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑");
            output.printInfo("0. –í—ã—Ö–æ–¥");
            output.print("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ");

            try {
                choice = Integer.parseInt(scanner.nextLine());
            } catch (NumberFormatException ex) {
                output.printWarning("‚ùó –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.");
                choice = -1;
            }

            switch (choice) {
                case 1 -> showAllOrders();
                case 2 -> findOrderById();
                case 3 -> payOrder();
                case 4 -> cancelOrder();
                case 0 -> output.printSuccess("–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é –∑–∞–∫–∞–∑–æ–≤.");
                default -> output.printWarning("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä.");
            }
        } while (choice != 0);
    }

    private void showAllOrders() {
        List<Order> all = orderService.getAllOrders();
        if (all.isEmpty()) {
            output.printInfo("üîç –ó–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.");
        } else {
            output.printInfo("üì¶ –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤:");
            all.forEach(o -> output.print(o.toString()));
        }
    }

    private void findOrderById() {
        output.print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞: ");
        try {
            long id = Long.parseLong(scanner.nextLine());
            Order order = orderService.getOrderById(id)
                    .orElseThrow(() -> new OrderNotFoundException(id));
            output.printInfo("üîç –ó–∞–∫–∞–∑ –Ω–∞–π–¥–µ–Ω: " + order);
        } catch (NumberFormatException ex) {
            output.printError("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.");
        } catch (OrderNotFoundException ex) {
            output.printError("‚ùå " + ex.getMessage());
        }
    }

    private void payOrder() {
        output.print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã: ");
        try {
            long id = Long.parseLong(scanner.nextLine());
            orderService.payOrder(id);
            output.printSuccess("‚úÖ –ó–∞–∫–∞–∑ #" + id + " –æ–ø–ª–∞—á–µ–Ω.");
        } catch (NumberFormatException ex) {
            output.printError("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.");
        } catch (OrderNotFoundException ex) {
            output.printError("‚ùå " + ex.getMessage());
        } catch (IllegalStateException ex) {
            output.printError("‚ùå " + ex.getMessage());
        }
    }

    private void cancelOrder() {
        output.print("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã: ");
        try {
            long id = Long.parseLong(scanner.nextLine());
            orderService.cancelOrder(id);
            output.printSuccess("‚úÖ –ó–∞–∫–∞–∑ #" + id + " –æ—Ç–º–µ–Ω—ë–Ω.");
        } catch (NumberFormatException ex) {
            output.printError("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID.");
        } catch (OrderNotFoundException ex) {
            output.printError("‚ùå " + ex.getMessage());
        } catch (IllegalStateException ex) {
            output.printError("‚ùå " + ex.getMessage());
        }
    }
}
